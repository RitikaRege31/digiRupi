generator client {
  provider      = "prisma-client-js"
  output        = "./prisma-client"
  // output        = "."
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://anushthaprakash:Fingals1729@digirupi.cxuovwekb1mq.us-east-1.rds.amazonaws.com:5432/digiRupi_db"
}

model Users {
  id                      String           @id @default(uuid())
  phoneNumber             String?          @unique
  firstName               String?
  recoveryEmail           String?          @unique
  lastName                String?
  walletPin               String?
  salt                   String?
  bankName                String?
  bankAccountHolderName   String?
  accountNumber           String?          
  isBeneficiary           Boolean          @default(false)
  isPvtOrg                Boolean?         @default(false)
  isServiceProvider       Boolean?         @default(false)
  walletIdBeneficiary     String?
  walletIdPvtOrg          String?
  walletIdServiceProvider String?
  createdAt               DateTime         @default(now())
  role                    Role?            @default(USER)
  beneficiaryInfo         beneficiary?
  pvtOrgInfo              pvtOrg?
  serviceProviderInfo     serviceProvider?
}

model beneficiary {
  beneficiaryId    String    @id @default(uuid())
  AvailableVoucher Voucher[]   
  Users            Users     @relation(fields: [beneficiaryId], references: [id])
}

model Voucher {
  voucherId            String          @id @default(uuid())
  voucherAmount        Int
  voucherCreatedAt     DateTime        @default(now())
  voucherRedeemed      Boolean         @default(false)
  voucherRedeemedDate  DateTime?
  voucherSPId          String          @default(uuid())
  voucherBeneficiaryId String          @default(uuid())
  PvtOrgById           String          @default(uuid())
  PvtOrgBy             pvtOrg          @relation(fields: [PvtOrgById], references: [privateOrgId])
  BeneficiaryUser      beneficiary     @relation(fields: [voucherBeneficiaryId], references: [beneficiaryId])
  ServiceProviderUser  serviceProvider @relation(fields: [voucherSPId], references: [serviceProviderId])
}

model pvtOrg {
  privateOrgId    String    @id @default(uuid())
  VouchersCreated Voucher[]
  CompanyName     String?
  positionInCompany String?
  Users           Users     @relation(fields: [privateOrgId], references: [id])
}

model serviceProvider {
  serviceProviderId String              @id @default(uuid())
  BusinessName       String?
  PositionInBusiness String?
  BusinessTag       ServiceProviderTag?
  VouchersRequested Voucher[]
  Users             Users               @relation(fields: [serviceProviderId], references: [id])
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum ServiceProviderTag {
  HOSPITALITY
  HEALTHCARE
  BUSINESS
  PENSION
  AGRICULTURE
  HOUSEHOLD_UTILITIES
  CHILDCARE
  OTHER
}
